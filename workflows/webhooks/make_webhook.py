#!/usr/bin/env python3
"""
Webhook para integra√ß√£o com Make
Recebe mensagens processadas e executa a√ß√µes de agendamento
"""

import json
import logging
import requests
from datetime import datetime
from typing import Dict, Any, Optional
from flask import Flask, request, jsonify
from config.settings import MAKE_CONFIG, WHATSAPP_CONFIG
from agents.barber_agent import barber_agent
from agents.whatsapp_handler import whatsapp_handler

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

class MakeWebhook:
    """Gerencia webhooks do Make"""
    
    def __init__(self):
        self.make_config = MAKE_CONFIG
        self.whatsapp_config = WHATSAPP_CONFIG
        self.barber_agent = barber_agent
        
    def verify_webhook(self, token: str) -> bool:
        """Verifica token do webhook do Make"""
        return token == self.make_config.get("webhook_token", "default_token")
    
    def process_make_request(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa requisi√ß√£o recebida do Make"""
        try:
            # Extrai dados da mensagem
            message = request_data.get("message", {})
            
            if not message:
                raise ValueError("Dados da mensagem n√£o encontrados")
            
            # Processa via agente
            result = self.barber_agent.process_message(
                message=message.get("text", ""),
                phone_number=message.get("from", ""),
                conversation_id=message.get("conversation_id", "")
            )
            
            logger.info(f"Mensagem processada pelo agente: {result}")
            return result
            
        except Exception as e:
            logger.error(f"Erro ao processar requisi√ß√£o do Make: {e}")
            raise
    
    def send_whatsapp_response(self, phone_number: str, message: str, quick_replies: Optional[list] = None) -> bool:
        """Envia resposta via WhatsApp"""
        try:
            if quick_replies:
                success = whatsapp_handler.send_quick_reply(phone_number, message, quick_replies)
            else:
                success = whatsapp_handler.send_message(phone_number, message)
            
            if success:
                logger.info(f"Resposta enviada para {phone_number}")
                return True
            else:
                logger.error(f"Falha ao enviar resposta para {phone_number}")
                return False
                
        except Exception as e:
            logger.error(f"Erro ao enviar resposta WhatsApp: {e}")
            return False
    
    def handle_scheduling_request(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa solicita√ß√£o de agendamento"""
        try:
            phone_number = data.get("phone_number")
            date = data.get("date")
            time = data.get("time")
            client_name = data.get("client_name")
            
            if not all([phone_number, date, time, client_name]):
                return {
                    "success": False,
                    "error": "Dados incompletos para agendamento"
                }
            
            # Cria agendamento via agente
            appointment = self.barber_agent.scheduler.create_appointment(
                client_name=client_name,
                client_phone=phone_number,
                date=date,
                time=time,
                service="Corte de Cabelo"
            )
            
            if appointment:
                # Envia confirma√ß√£o
                confirmation_msg = f"‚úÖ Agendamento confirmado!\n\nüìÖ Data: {date}\nüïê Hor√°rio: {time}\nüë§ Nome: {client_name}\n\n‚è∞ Lembrete: Chegue 10 minutos antes do hor√°rio."
                
                self.send_whatsapp_response(
                    phone_number,
                    confirmation_msg,
                    [
                        {"id": "confirm", "title": "‚úÖ Confirmado"},
                        {"id": "reschedule", "title": "üîÑ Remarcar"},
                        {"id": "cancel", "title": "‚ùå Cancelar"}
                    ]
                )
                
                return {
                    "success": True,
                    "appointment_id": appointment.id,
                    "message": "Agendamento criado com sucesso"
                }
            else:
                return {
                    "success": False,
                    "error": "Falha ao criar agendamento"
                }
                
        except Exception as e:
            logger.error(f"Erro no agendamento: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def handle_availability_check(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa verifica√ß√£o de disponibilidade"""
        try:
            date = data.get("date")
            phone_number = data.get("phone_number")
            
            if not date:
                return {
                    "success": False,
                    "error": "Data n√£o informada"
                }
            
            # Busca hor√°rios dispon√≠veis
            available_slots = self.barber_agent.scheduler.get_available_slots(date)
            
            if available_slots:
                # Formata hor√°rios dispon√≠veis
                time_list = "\n".join([f"‚Ä¢ {slot.time}" for slot in available_slots[:10]])
                
                availability_msg = f"üïê Hor√°rios dispon√≠veis para {date}:\n\n{time_list}"
                
                if len(available_slots) > 10:
                    availability_msg += f"\n\n... e mais {len(available_slots) - 10} hor√°rios dispon√≠veis."
                
                # Adiciona bot√µes de a√ß√£o
                availability_msg += "\n\nO que gostaria de fazer?"
                
                self.send_whatsapp_response(
                    phone_number,
                    availability_msg,
                    [
                        {"id": "schedule", "title": "üìÖ Fazer Agendamento"},
                        {"id": "check_other_date", "title": "üîç Ver Outra Data"},
                        {"id": "help", "title": "‚ùì Ajuda"}
                    ]
                )
                
                return {
                    "success": True,
                    "available_slots": len(available_slots),
                    "message": "Disponibilidade verificada com sucesso"
                }
            else:
                # Nenhum hor√°rio dispon√≠vel
                no_availability_msg = f"üòî N√£o h√° hor√°rios dispon√≠veis para {date}.\n\nGostaria de ver outras datas?"
                
                self.send_whatsapp_response(
                    phone_number,
                    no_availability_msg,
                    [
                        {"id": "check_other_date", "title": "üîç Ver Outra Data"},
                        {"id": "schedule_later", "title": "üìÖ Agendar Mais Tarde"},
                        {"id": "help", "title": "‚ùì Ajuda"}
                    ]
                )
                
                return {
                    "success": True,
                    "available_slots": 0,
                    "message": "Nenhum hor√°rio dispon√≠vel"
                }
                
        except Exception as e:
            logger.error(f"Erro na verifica√ß√£o de disponibilidade: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def handle_cancellation_request(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa solicita√ß√£o de cancelamento"""
        try:
            phone_number = data.get("phone_number")
            appointment_id = data.get("appointment_id")
            
            if not phone_number:
                return {
                    "success": False,
                    "error": "N√∫mero de telefone n√£o informado"
                }
            
            if appointment_id:
                # Cancela agendamento espec√≠fico
                success = self.barber_agent.scheduler.cancel_appointment(appointment_id)
                
                if success:
                    cancellation_msg = "‚ùå Agendamento cancelado com sucesso!\n\nGostaria de fazer um novo agendamento?"
                    
                    self.send_whatsapp_response(
                        phone_number,
                        cancellation_msg,
                        [
                            {"id": "new_appointment", "title": "üìÖ Novo Agendamento"},
                            {"id": "help", "title": "‚ùì Ajuda"}
                        ]
                    )
                    
                    return {
                        "success": True,
                        "message": "Agendamento cancelado com sucesso"
                    }
                else:
                    return {
                        "success": False,
                        "error": "Falha ao cancelar agendamento"
                    }
            else:
                # Busca agendamentos do cliente
                appointments = self.barber_agent.scheduler.get_appointment_by_client(phone_number)
                
                if appointments:
                    # Lista agendamentos para cancelamento
                    appointments_list = "üìã Seus agendamentos:\n\n"
                    for i, apt in enumerate(appointments, 1):
                        appointments_list += f"{i}. {apt.date} √†s {apt.time}\n"
                    
                    appointments_list += "\nQual voc√™ gostaria de cancelar? Responda com o n√∫mero."
                    
                    self.send_whatsapp_response(phone_number, appointments_list)
                    
                    return {
                        "success": True,
                        "appointments_count": len(appointments),
                        "message": "Agendamentos listados para cancelamento"
                    }
                else:
                    no_appointments_msg = "üòî N√£o encontrei agendamentos para este n√∫mero.\n\nPode verificar se o n√∫mero est√° correto?"
                    
                    self.send_whatsapp_response(
                        phone_number,
                        no_appointments_msg,
                        [
                            {"id": "check_number", "title": "üîç Verificar N√∫mero"},
                            {"id": "help", "title": "‚ùì Ajuda"}
                        ]
                    )
                    
                    return {
                        "success": True,
                        "appointments_count": 0,
                        "message": "Nenhum agendamento encontrado"
                    }
                    
        except Exception as e:
            logger.error(f"Erro no cancelamento: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def handle_reschedule_request(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa solicita√ß√£o de remarca√ß√£o"""
        try:
            phone_number = data.get("phone_number")
            appointment_id = data.get("appointment_id")
            new_date = data.get("new_date")
            new_time = data.get("new_time")
            
            if not phone_number:
                return {
                    "success": False,
                    "error": "N√∫mero de telefone n√£o informado"
                }
            
            if appointment_id and new_date and new_time:
                # Executa remarca√ß√£o
                success = self.barber_agent.scheduler.reschedule_appointment(
                    appointment_id, new_date, new_time
                )
                
                if success:
                    reschedule_msg = f"üîÑ Agendamento remarcado com sucesso!\n\nüìÖ Nova data: {new_date}\nüïê Novo hor√°rio: {new_time}\n\n‚è∞ Lembrete: Chegue 10 minutos antes do hor√°rio."
                    
                    self.send_whatsapp_response(
                        phone_number,
                        reschedule_msg,
                        [
                            {"id": "confirm", "title": "‚úÖ Confirmado"},
                            {"id": "help", "title": "‚ùì Ajuda"}
                        ]
                    )
                    
                    return {
                        "success": True,
                        "message": "Agendamento remarcado com sucesso"
                    }
                else:
                    return {
                        "success": False,
                        "error": "Falha ao remarcar agendamento"
                    }
            else:
                # Busca agendamentos para remarca√ß√£o
                appointments = self.barber_agent.scheduler.get_appointment_by_client(phone_number)
                
                if appointments:
                    # Lista agendamentos para remarca√ß√£o
                    appointments_list = "üìã Seus agendamentos:\n\n"
                    for i, apt in enumerate(appointments, 1):
                        appointments_list += f"{i}. {apt.date} √†s {apt.time}\n"
                    
                    appointments_list += "\nQual voc√™ gostaria de remarcar? Responda com o n√∫mero."
                    
                    self.send_whatsapp_response(phone_number, appointments_list)
                    
                    return {
                        "success": True,
                        "appointments_count": len(appointments),
                        "message": "Agendamentos listados para remarca√ß√£o"
                    }
                else:
                    no_appointments_msg = "üòî N√£o encontrei agendamentos para este n√∫mero.\n\nPode verificar se o n√∫mero est√° correto?"
                    
                    self.send_whatsapp_response(
                        phone_number,
                        no_appointments_msg,
                        [
                            {"id": "check_number", "title": "üîç Verificar N√∫mero"},
                            {"id": "help", "title": "‚ùì Ajuda"}
                        ]
                    )
                    
                    return {
                        "success": True,
                        "appointments_count": 0,
                        "message": "Nenhum agendamento encontrado"
                    }
                    
        except Exception as e:
            logger.error(f"Erro na remarca√ß√£o: {e}")
            return {
                "success": False,
                "error": str(e)
            }

# Inst√¢ncia global
make_webhook = MakeWebhook()

@app.route('/webhook/make', methods=['POST'])
def make_webhook():
    """Endpoint principal do webhook do Make"""
    
    try:
        # Verifica token de autentica√ß√£o
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith('Bearer '):
            return jsonify({"error": "Token de autentica√ß√£o inv√°lido"}), 401
        
        token = auth_header.split(' ')[1]
        if not make_webhook.verify_webhook(token):
            return jsonify({"error": "Token inv√°lido"}), 401
        
        # Recebe dados do Make
        data = request.get_json()
        logger.info(f"Webhook do Make recebido: {data}")
        
        # Identifica tipo de a√ß√£o
        action_type = data.get("action_type", "process_message")
        
        if action_type == "schedule_appointment":
            result = make_webhook.handle_scheduling_request(data)
        elif action_type == "check_availability":
            result = make_webhook.handle_availability_check(data)
        elif action_type == "cancel_appointment":
            result = make_webhook.handle_cancellation_request(data)
        elif action_type == "reschedule_appointment":
            result = make_webhook.handle_reschedule_request(data)
        else:
            # Processa mensagem padr√£o
            result = make_webhook.process_make_request(data)
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"Erro no webhook do Make: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/webhook/make/status', methods=['GET'])
def make_webhook_status():
    """Endpoint para verificar status do webhook do Make"""
    return jsonify({
        "status": "active",
        "timestamp": datetime.utcnow().isoformat(),
        "platform": "make",
        "endpoints": {
            "webhook": "/webhook/make",
            "status": "/webhook/make/status"
        },
        "supported_actions": [
            "schedule_appointment",
            "check_availability", 
            "cancel_appointment",
            "reschedule_appointment",
            "process_message"
        ]
    })

@app.route('/webhook/make/test', methods=['POST'])
def test_make_webhook():
    """Endpoint para testar o webhook do Make"""
    try:
        data = request.get_json()
        test_type = data.get("test_type", "message")
        
        if test_type == "schedule":
            result = make_webhook.handle_scheduling_request({
                "phone_number": "5511999999999",
                "date": "2024-01-15",
                "time": "14:00",
                "client_name": "Jo√£o Silva"
            })
        elif test_type == "availability":
            result = make_webhook.handle_availability_check({
                "phone_number": "5511999999999",
                "date": "2024-01-15"
            })
        else:
            result = make_webhook.process_make_request({
                "message": {
                    "text": "Ol√°, gostaria de agendar um hor√°rio",
                    "from": "5511999999999",
                    "conversation_id": "test_123"
                }
            })
        
        return jsonify({
            "status": "success",
            "test_type": test_type,
            "result": result
        })
        
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)