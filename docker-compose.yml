version: '3.8'

services:
  # Aplicação principal
  barbearia-app:
    build: .
    container_name: barbearia-scheduling
    restart: unless-stopped
    ports:
      - "5000:5000"  # SuperAgentes webhook
      - "5001:5001"  # Make webhook
      - "5002:5002"  # WhatsApp webhook
    environment:
      - DATABASE_HOST=postgres
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - barbearia-network

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: barbearia-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=barbearia_scheduling
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - barbearia-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: barbearia-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - barbearia-network

  # Nginx para proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: barbearia-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - barbearia-app
    networks:
      - barbearia-network

  # Monitoramento com Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: barbearia-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - barbearia-network

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: barbearia-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - barbearia-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  barbearia-network:
    driver: bridge